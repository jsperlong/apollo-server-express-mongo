type User {
    id: _id!
    username: String!
    name: String!
    email: String!
    phone: String
    avatar: String
    avatarurl: String
    role: Role
    active: Boolean!
    createdAt: String
    updatedAt: String
}

scalar _id

type Token {
    token:String!
    user: User
}

type RecoverPasswordResponse{
    status: Boolean
    message: String
}

type ChangePasswordResponse{
    status: Boolean
    message: String
}

type File {
    filename: String!
    mimetype: String!
    encoding: String!
    url: String!
}

type CreateUserResponse{
    user: User
}

type RegisterUserResponse{
    status: Boolean!,
    id: String!,
    email: String!
}

type UpdateUserResponse{
    user: User
}


input UserInput{
    username: String!
    name: String!
    email: String!
    password: String
    phone: String
    role: String!
}

input RegisterInput{
    username: String!
    name: String!
    email: String!
    password: String!
    phone: String
}

type Query {
    users: [User!]
    user(id: ID!): User
    me: User
}

type Mutation {
    auth(username: String!, password:String!): Token
    createUser(input: UserInput): User
    updateUser(id: _id!, input: UserInput): User
    deleteUser(id: _id!): Boolean!

    registerUser(input: RegisterInput): RegisterUserResponse

    #recoveryPassword(email:String!):RecoverPasswordResponse!
    changePassword( password:String!, passwordVerify:String!): ChangePasswordResponse!

    #avatarUpload(file: Upload!): File!
}