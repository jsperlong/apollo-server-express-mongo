type User {
    id: ID!
    username: String!
    name: String!
    email: String!
    phone: String
    avatar: String
    avatarurl: String
    role: Role
    active: Boolean!
    createdAt: String
    updatedAt: String
}


type Token {
    token:String!
}

type RecoverPasswordResponse{
    status: Boolean
    message: String
}
type ActivationUserResponse{
    status: Boolean
    message: String
}

type ChangePasswordResponse{
    status: Boolean
    message: String
}

type File {
    filename: String!
    mimetype: String!
    encoding: String!
    url: String!
}

type RegisterUserResponse{
    status: Boolean!,
    id: String!,
    email: String!
}

input UserInput{
    username: String!
    name: String!
    email: String!
    password: String
    phone: String
    role: String!
    active: Boolean!
}

input RegisterInput{
    username: String!
    name: String!
    email: String!
    password: String!
    phone: String
}

type Query {
    users: [User!]
    user(id: ID!): User
    me: User
}

type File {
    filename: String!
    mimetype: String!
    encoding: String!
    url: String!
}

type UserDelete{
    id: ID!
    deleteSuccess: Boolean!
}

type Mutation {
    auth(username: String!, password:String!): Token

    createUser(input: UserInput): User
    updateUser(id: ID!, input: UserInput): User

    deleteUser(id: ID!): UserDelete!

    adminChangePassword(id: ID!, password:String!, passwordVerify:String!): ChangePasswordResponse!

    registerUser(input: RegisterInput): RegisterUserResponse

    recoveryPassword(email:String!):RecoverPasswordResponse!
    changePassword( password:String!, passwordVerify:String!): ChangePasswordResponse!
    activationUser(id:ID!):ActivationUserResponse!

    avatarUpload(file: Upload!): File!
}
